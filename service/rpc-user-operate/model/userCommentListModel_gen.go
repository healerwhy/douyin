// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"douyin/common/globalkey"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCommentListFieldNames          = builder.RawFieldNames(&UserCommentList{})
	userCommentListRows                = strings.Join(userCommentListFieldNames, ",")
	userCommentListRowsExpectAutoSet   = strings.Join(stringx.Remove(userCommentListFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userCommentListRowsWithPlaceHolder = strings.Join(stringx.Remove(userCommentListFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheDouyin2UserCommentListIdPrefix                     = "cache:douyin2:userCommentList:id:"
	cacheDouyin2UserCommentListVideoIdCommentIdUserIdPrefix = "cache:douyin2:userCommentList:videoId:commentId:userId:"
)

type (
	userCommentListModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserCommentList) (sql.Result, error)
		InsertOrUpdate(ctx context.Context, session sqlx.Session, field string, setStatus string, videoId, objId, userId, opt int64) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserCommentList, error)
		FindOneByVideoIdCommentIdUserId(ctx context.Context, videoId int64, commentId int64, userId int64) (*UserCommentList, error)
		Update(ctx context.Context, session sqlx.Session, data *UserCommentList) (sql.Result, error)
		UpdateStatus(ctx context.Context, session sqlx.Session, key string, idx string, actionType, id int64) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserCommentList) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUserCommentListModel struct {
		sqlc.CachedConn
		table string
	}

	UserCommentList struct {
		Id         int64     `db:"id"`
		VideoId    int64     `db:"video_id"`
		CommentId  int64     `db:"comment_id"`
		UserId     int64     `db:"user_id"`
		DelState   int64     `db:"del_state"`
		CreateTime time.Time `db:"create_time"`
	}
)

func newUserCommentListModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserCommentListModel {
	return &defaultUserCommentListModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_comment_list`",
	}
}

func (m *defaultUserCommentListModel) Insert(ctx context.Context, session sqlx.Session, data *UserCommentList) (sql.Result, error) {
	// data.DeletedTime = time.Unix(0,0)
	douyin2UserCommentListIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserCommentListIdPrefix, data.Id)
	douyin2UserCommentListVideoIdCommentIdUserIdKey := fmt.Sprintf("%s%v:%v:%v", cacheDouyin2UserCommentListVideoIdCommentIdUserIdPrefix, data.VideoId, data.CommentId, data.UserId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userCommentListRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.VideoId, data.CommentId, data.UserId, data.DelState)
		}
		return conn.ExecCtx(ctx, query, data.VideoId, data.CommentId, data.UserId, data.DelState)
	}, douyin2UserCommentListIdKey, douyin2UserCommentListVideoIdCommentIdUserIdKey)
}

func (m *defaultUserCommentListModel) InsertOrUpdate(ctx context.Context, session sqlx.Session, field string, setStatus string, videoId, objId, userId, opt int64) (sql.Result, error) {
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("INSERT INTO %s (%s) VALUES (%d,%d,%d,?) ON DUPLICATE KEY UPDATE %s=?", m.table, field, videoId, objId, userId, setStatus)
		if session != nil {
			return session.ExecCtx(ctx, query, opt, opt)
		}
		return conn.ExecCtx(ctx, query, opt, opt)
	})
}
func (m *defaultUserCommentListModel) FindOne(ctx context.Context, id int64) (*UserCommentList, error) {
	douyin2UserCommentListIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserCommentListIdPrefix, id)
	var resp UserCommentList
	err := m.QueryRowCtx(ctx, &resp, douyin2UserCommentListIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", userCommentListRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCommentListModel) FindOneByVideoIdCommentIdUserId(ctx context.Context, videoId int64, commentId int64, userId int64) (*UserCommentList, error) {
	douyin2UserCommentListVideoIdCommentIdUserIdKey := fmt.Sprintf("%s%v:%v:%v", cacheDouyin2UserCommentListVideoIdCommentIdUserIdPrefix, videoId, commentId, userId)
	var resp UserCommentList
	err := m.QueryRowIndexCtx(ctx, &resp, douyin2UserCommentListVideoIdCommentIdUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `video_id` = ? and `comment_id` = ? and `user_id` = ? and del_state = ? limit 1", userCommentListRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, videoId, commentId, userId, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCommentListModel) Update(ctx context.Context, session sqlx.Session, data *UserCommentList) (sql.Result, error) {
	douyin2UserCommentListIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserCommentListIdPrefix, data.Id)
	douyin2UserCommentListVideoIdCommentIdUserIdKey := fmt.Sprintf("%s%v:%v:%v", cacheDouyin2UserCommentListVideoIdCommentIdUserIdPrefix, data.VideoId, data.CommentId, data.UserId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userCommentListRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.VideoId, data.CommentId, data.UserId, data.DelState, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.VideoId, data.CommentId, data.UserId, data.DelState, data.Id)
	}, douyin2UserCommentListIdKey, douyin2UserCommentListVideoIdCommentIdUserIdKey)
}

func (m *defaultUserCommentListModel) UpdateStatus(ctx context.Context, session sqlx.Session, key string, idx string, actionType, id int64) (sql.Result, error) {

	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("UPDATE %s SET %s=%s+? WHERE %s=?", m.table, key, key, idx)
		if session != nil {
			return session.ExecCtx(ctx, query, actionType, id)
		}
		return conn.ExecCtx(ctx, query, actionType, id)
	})
}

func (m *defaultUserCommentListModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserCommentList) error {

	return nil

}

func (m *defaultUserCommentListModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	douyin2UserCommentListIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserCommentListIdPrefix, id)
	douyin2UserCommentListVideoIdCommentIdUserIdKey := fmt.Sprintf("%s%v:%v:%v", cacheDouyin2UserCommentListVideoIdCommentIdUserIdPrefix, data.VideoId, data.CommentId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, douyin2UserCommentListIdKey, douyin2UserCommentListVideoIdCommentIdUserIdKey)
	return err
}

func (m *defaultUserCommentListModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDouyin2UserCommentListIdPrefix, primary)
}
func (m *defaultUserCommentListModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", userCommentListRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultUserCommentListModel) tableName() string {
	return m.table
}
