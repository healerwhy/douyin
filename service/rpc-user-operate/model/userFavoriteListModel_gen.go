// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"douyin/common/globalkey"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	userFavoriteListFieldNames          = builder.RawFieldNames(&UserFavoriteList{})
	userFavoriteListRows                = strings.Join(userFavoriteListFieldNames, ",")
	userFavoriteListRowsExpectAutoSet   = strings.Join(stringx.Remove(userFavoriteListFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userFavoriteListRowsWithPlaceHolder = strings.Join(stringx.Remove(userFavoriteListFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheDouyin2UserFavoriteListIdPrefix            = "cache:douyin2:userFavoriteList:id:"
	cacheDouyin2UserFavoriteListUserIdVideoIdPrefix = "cache:douyin2:userFavoriteList:userId:videoId:"
)

type (
	userFavoriteListModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserFavoriteList) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserFavoriteList, error)
		FindOneByUserIdVideoId(ctx context.Context, userId int64, videoId int64) (*UserFavoriteList, error)
		Update(ctx context.Context, session sqlx.Session, data *UserFavoriteList) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserFavoriteList) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUserFavoriteListModel struct {
		sqlc.CachedConn
		table string
	}

	UserFavoriteList struct {
		Id         int64 `db:"id"`
		UserId     int64 `db:"user_id"`
		VideoId    int64 `db:"video_id"`
		IsFavorite int64 `db:"is_favorite"` // 点赞
		DelState   int64 `db:"del_state"`
	}
)

func newUserFavoriteListModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserFavoriteListModel {
	return &defaultUserFavoriteListModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_favorite_list`",
	}
}

func (m *defaultUserFavoriteListModel) Insert(ctx context.Context, session sqlx.Session, data *UserFavoriteList) (sql.Result, error) {
	douyin2UserFavoriteListIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserFavoriteListIdPrefix, data.Id)
	douyin2UserFavoriteListUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheDouyin2UserFavoriteListUserIdVideoIdPrefix, data.UserId, data.VideoId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userFavoriteListRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.VideoId, data.IsFavorite, data.DelState)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.VideoId, data.IsFavorite, data.DelState)
	}, douyin2UserFavoriteListIdKey, douyin2UserFavoriteListUserIdVideoIdKey)
}

func (m *defaultUserFavoriteListModel) FindOne(ctx context.Context, id int64) (*UserFavoriteList, error) {
	douyin2UserFavoriteListIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserFavoriteListIdPrefix, id)
	var resp UserFavoriteList
	err := m.QueryRowCtx(ctx, &resp, douyin2UserFavoriteListIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", userFavoriteListRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFavoriteListModel) FindOneByUserIdVideoId(ctx context.Context, userId int64, videoId int64) (*UserFavoriteList, error) {
	douyin2UserFavoriteListUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheDouyin2UserFavoriteListUserIdVideoIdPrefix, userId, videoId)
	var resp UserFavoriteList
	err := m.QueryRowIndexCtx(ctx, &resp, douyin2UserFavoriteListUserIdVideoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `video_id` = ? and del_state = ? limit 1", userFavoriteListRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, videoId, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFavoriteListModel) Update(ctx context.Context, session sqlx.Session, data *UserFavoriteList) (sql.Result, error) {
	douyin2UserFavoriteListIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserFavoriteListIdPrefix, data.Id)
	douyin2UserFavoriteListUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheDouyin2UserFavoriteListUserIdVideoIdPrefix, data.UserId, data.VideoId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFavoriteListRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.VideoId, data.IsFavorite, data.DelState, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.VideoId, data.IsFavorite, data.DelState, data.Id)
	}, douyin2UserFavoriteListIdKey, douyin2UserFavoriteListUserIdVideoIdKey)
}

func (m *defaultUserFavoriteListModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserFavoriteList) error {

	return nil

}

func (m *defaultUserFavoriteListModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	douyin2UserFavoriteListIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserFavoriteListIdPrefix, id)
	douyin2UserFavoriteListUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheDouyin2UserFavoriteListUserIdVideoIdPrefix, data.UserId, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, douyin2UserFavoriteListIdKey, douyin2UserFavoriteListUserIdVideoIdKey)
	return err
}

func (m *defaultUserFavoriteListModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDouyin2UserFavoriteListIdPrefix, primary)
}
func (m *defaultUserFavoriteListModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", userFavoriteListRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultUserFavoriteListModel) tableName() string {
	return m.table
}
