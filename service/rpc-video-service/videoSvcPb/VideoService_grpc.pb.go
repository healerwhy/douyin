// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: VideoService.proto

package videoSvcPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	//-----------------------video-----------------------
	PubVideo(ctx context.Context, in *PubVideoReq, opts ...grpc.CallOption) (*PubVideoResp, error)
	GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error)
	FeedVideos(ctx context.Context, in *FeedVideosReq, opts ...grpc.CallOption) (*FeedVideosResp, error)
	GetMyFavoriteVideos(ctx context.Context, in *MyFavoriteVideosReq, opts ...grpc.CallOption) (*MyFavoriteVideosResp, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) PubVideo(ctx context.Context, in *PubVideoReq, opts ...grpc.CallOption) (*PubVideoResp, error) {
	out := new(PubVideoResp)
	err := c.cc.Invoke(ctx, "/pb.VideoService/PubVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error) {
	out := new(GetVideoListResp)
	err := c.cc.Invoke(ctx, "/pb.VideoService/GetVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) FeedVideos(ctx context.Context, in *FeedVideosReq, opts ...grpc.CallOption) (*FeedVideosResp, error) {
	out := new(FeedVideosResp)
	err := c.cc.Invoke(ctx, "/pb.VideoService/FeedVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetMyFavoriteVideos(ctx context.Context, in *MyFavoriteVideosReq, opts ...grpc.CallOption) (*MyFavoriteVideosResp, error) {
	out := new(MyFavoriteVideosResp)
	err := c.cc.Invoke(ctx, "/pb.VideoService/GetMyFavoriteVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	//-----------------------video-----------------------
	PubVideo(context.Context, *PubVideoReq) (*PubVideoResp, error)
	GetVideoList(context.Context, *GetVideoListReq) (*GetVideoListResp, error)
	FeedVideos(context.Context, *FeedVideosReq) (*FeedVideosResp, error)
	GetMyFavoriteVideos(context.Context, *MyFavoriteVideosReq) (*MyFavoriteVideosResp, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) PubVideo(context.Context, *PubVideoReq) (*PubVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoList(context.Context, *GetVideoListReq) (*GetVideoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoList not implemented")
}
func (UnimplementedVideoServiceServer) FeedVideos(context.Context, *FeedVideosReq) (*FeedVideosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedVideos not implemented")
}
func (UnimplementedVideoServiceServer) GetMyFavoriteVideos(context.Context, *MyFavoriteVideosReq) (*MyFavoriteVideosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyFavoriteVideos not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_PubVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PubVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VideoService/PubVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PubVideo(ctx, req.(*PubVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VideoService/GetVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoList(ctx, req.(*GetVideoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_FeedVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedVideosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).FeedVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VideoService/FeedVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).FeedVideos(ctx, req.(*FeedVideosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetMyFavoriteVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyFavoriteVideosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetMyFavoriteVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VideoService/GetMyFavoriteVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetMyFavoriteVideos(ctx, req.(*MyFavoriteVideosReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubVideo",
			Handler:    _VideoService_PubVideo_Handler,
		},
		{
			MethodName: "GetVideoList",
			Handler:    _VideoService_GetVideoList_Handler,
		},
		{
			MethodName: "FeedVideos",
			Handler:    _VideoService_FeedVideos_Handler,
		},
		{
			MethodName: "GetMyFavoriteVideos",
			Handler:    _VideoService_GetMyFavoriteVideos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "VideoService.proto",
}
