// Code generated by goctl. DO NOT EDIT!
// Source: VideoService.proto

package videoservice

import (
	"context"

	"douyin/service/rpc-video-service/videoSvcPb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FeedVideosReq        = videoSvcPb.FeedVideosReq
	FeedVideosResp       = videoSvcPb.FeedVideosResp
	GetVideoListReq      = videoSvcPb.GetVideoListReq
	GetVideoListResp     = videoSvcPb.GetVideoListResp
	MyFavoriteVideosReq  = videoSvcPb.MyFavoriteVideosReq
	MyFavoriteVideosResp = videoSvcPb.MyFavoriteVideosResp
	PubVideoReq          = videoSvcPb.PubVideoReq
	PubVideoResp         = videoSvcPb.PubVideoResp
	Video                = videoSvcPb.Video

	VideoService interface {
		// -----------------------video-----------------------
		PubVideo(ctx context.Context, in *PubVideoReq, opts ...grpc.CallOption) (*PubVideoResp, error)
		GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error)
		FeedVideos(ctx context.Context, in *FeedVideosReq, opts ...grpc.CallOption) (*FeedVideosResp, error)
		GetMyFavoriteVideos(ctx context.Context, in *MyFavoriteVideosReq, opts ...grpc.CallOption) (*MyFavoriteVideosResp, error)
	}

	defaultVideoService struct {
		cli zrpc.Client
	}
)

func NewVideoService(cli zrpc.Client) VideoService {
	return &defaultVideoService{
		cli: cli,
	}
}

// -----------------------video-----------------------
func (m *defaultVideoService) PubVideo(ctx context.Context, in *PubVideoReq, opts ...grpc.CallOption) (*PubVideoResp, error) {
	client := videoSvcPb.NewVideoServiceClient(m.cli.Conn())
	return client.PubVideo(ctx, in, opts...)
}

func (m *defaultVideoService) GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error) {
	client := videoSvcPb.NewVideoServiceClient(m.cli.Conn())
	return client.GetVideoList(ctx, in, opts...)
}

func (m *defaultVideoService) FeedVideos(ctx context.Context, in *FeedVideosReq, opts ...grpc.CallOption) (*FeedVideosResp, error) {
	client := videoSvcPb.NewVideoServiceClient(m.cli.Conn())
	return client.FeedVideos(ctx, in, opts...)
}

func (m *defaultVideoService) GetMyFavoriteVideos(ctx context.Context, in *MyFavoriteVideosReq, opts ...grpc.CallOption) (*MyFavoriteVideosResp, error) {
	client := videoSvcPb.NewVideoServiceClient(m.cli.Conn())
	return client.GetMyFavoriteVideos(ctx, in, opts...)
}
