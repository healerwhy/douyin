// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"douyin/common/globalkey"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`user_id`", "`create_time`", "`update_time`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`user_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheDouyin2UserUserIdPrefix   = "cache:douyin2:user:userId:"
	cacheDouyin2UserUserNamePrefix = "cache:douyin2:user:userName:"
)

type (
	userModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*User, error)
		FindOneByUserName(ctx context.Context, userName string) (*User, error)
		Update(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *User) error
		Delete(ctx context.Context, session sqlx.Session, userId int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		UserId         int64     `db:"user_id"`
		UserName       string    `db:"user_name"`
		PasswordDigest string    `db:"password_digest"`
		FollowCount    int64     `db:"follow_count"`
		FollowerCount  int64     `db:"follower_count"`
		DelState       int64     `db:"del_state"`
		CreateTime     time.Time `db:"create_time"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error) {
	douyin2UserUserIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserUserIdPrefix, data.UserId)
	douyin2UserUserNameKey := fmt.Sprintf("%s%v", cacheDouyin2UserUserNamePrefix, data.UserName)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserName, data.PasswordDigest, data.FollowCount, data.FollowerCount, data.DelState)
		}
		return conn.ExecCtx(ctx, query, data.UserName, data.PasswordDigest, data.FollowCount, data.FollowerCount, data.DelState)
	}, douyin2UserUserIdKey, douyin2UserUserNameKey)
}

func (m *defaultUserModel) FindOne(ctx context.Context, userId int64) (*User, error) {
	douyin2UserUserIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserUserIdPrefix, userId)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, douyin2UserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and del_state = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUserName(ctx context.Context, userName string) (*User, error) {
	douyin2UserUserNameKey := fmt.Sprintf("%s%v", cacheDouyin2UserUserNamePrefix, userName)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, douyin2UserUserNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_name` = ? and del_state = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userName, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Update(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error) {
	douyin2UserUserIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserUserIdPrefix, data.UserId)
	douyin2UserUserNameKey := fmt.Sprintf("%s%v", cacheDouyin2UserUserNamePrefix, data.UserName)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, userRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserName, data.PasswordDigest, data.FollowCount, data.FollowerCount, data.DelState, data.UserId)
		}
		return conn.ExecCtx(ctx, query, data.UserName, data.PasswordDigest, data.FollowCount, data.FollowerCount, data.DelState, data.UserId)
	}, douyin2UserUserIdKey, douyin2UserUserNameKey)
}

func (m *defaultUserModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *User) error {

	return nil

}

func (m *defaultUserModel) Delete(ctx context.Context, session sqlx.Session, userId int64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}

	douyin2UserUserIdKey := fmt.Sprintf("%s%v", cacheDouyin2UserUserIdPrefix, userId)
	douyin2UserUserNameKey := fmt.Sprintf("%s%v", cacheDouyin2UserUserNamePrefix, data.UserName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, userId)
		}
		return conn.ExecCtx(ctx, query, userId)
	}, douyin2UserUserIdKey, douyin2UserUserNameKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDouyin2UserUserIdPrefix, primary)
}
func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and del_state = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
