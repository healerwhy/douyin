// Code generated by goctl. DO NOT EDIT!
// Source: UserInfoService.proto

package userinfoservice

import (
	"context"

	"douyin/service/rpc-user-info/userInfoPb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthsInfoReq  = userInfoPb.AuthsInfoReq
	AuthsInfoResp = userInfoPb.AuthsInfoResp
	LoginReq      = userInfoPb.LoginReq
	LoginResp     = userInfoPb.LoginResp
	RegisterReq   = userInfoPb.RegisterReq
	RegisterResp  = userInfoPb.RegisterResp
	User          = userInfoPb.User
	UserInfoReq   = userInfoPb.UserInfoReq
	UserInfoResp  = userInfoPb.UserInfoResp

	UserInfoService interface {
		// -----------------------user-----------------------
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Info(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		AuthsInfo(ctx context.Context, in *AuthsInfoReq, opts ...grpc.CallOption) (*AuthsInfoResp, error)
	}

	defaultUserInfoService struct {
		cli zrpc.Client
	}
)

func NewUserInfoService(cli zrpc.Client) UserInfoService {
	return &defaultUserInfoService{
		cli: cli,
	}
}

// -----------------------user-----------------------
func (m *defaultUserInfoService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := userInfoPb.NewUserInfoServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserInfoService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := userInfoPb.NewUserInfoServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserInfoService) Info(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := userInfoPb.NewUserInfoServiceClient(m.cli.Conn())
	return client.Info(ctx, in, opts...)
}

func (m *defaultUserInfoService) AuthsInfo(ctx context.Context, in *AuthsInfoReq, opts ...grpc.CallOption) (*AuthsInfoResp, error) {
	client := userInfoPb.NewUserInfoServiceClient(m.cli.Conn())
	return client.AuthsInfo(ctx, in, opts...)
}
